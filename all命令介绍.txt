# 克隆
git clone [url]
==========================
# 克隆等同的操作手段
#将一个空文件夹初始化为git文件夹
git init
# 添加远程仓库
git remote add [仓库名] [仓库的url]
# 可以查看远程仓库 （-v 远程的仓库）
git remote -v
# 拉取远程仓库相关的最新文件
git pull [前面添加的远程仓库名字] [对应的仓库的分支名]
# 查看相关的分支
git branch
# 查看远程仓库的分支 
git branch -r

==========================
# 加入暂存区
git add [filename]
# 查看当前的git的状态
git status
# 查看git的提交的相关的日志
git log --pretty =oneline
# 删除对应的文件（这样执行直接回在暂存区添加修改）
git rm  [filename]
# 重命名对应的文件（这样执行直接回在暂存区添加修改）
git mv  [filename] [filename]
# 将提交的暂存区域的文件 还原为未暂存
git reset HEAD [filename]
# 将对应的提交提交在本地库中 
git commit 
git commit -m "注释内容"
如果是非新加的文件（就是受到git控制的文件）这边直接加上-a 就可以直接省略 git add
git commit -a -m "comments"
可以实现这次提的注释修改为上次提交的提交的注释
git commit --amend
# 将本地提交提交到远程库中
git push -u origin master
#这边是将修改的文件（还没进入暂存区域的文件即无状态的时候）放弃所有的修改的（慎用）
git checkout -- [filename]
====================================================================================
git diff 文件对比
#工作区与暂存区比较
git diff  [filename]
#工作区与HEAD ( 当前工作分支) 比较
git diff HEAD [filename]
#暂存区与HEAD比较
git diff --staged 或 --cached  [filename]
#当前分支的文件与branchName 分支的文件进行比较
git diff branchName [filename]
#与某一次提交进行比较
git diff commitId [filename]
====================================================================================
#查看历史
git log
相关的显示参数介绍如下
1. -p：按补丁显示每个更新间的差异，比下一条- -stat命令信息更全
2. --stat：显示每次更新的修改文件的统计信息，每个提交都列出了修改过的文件，以及其中添加和移除的行数，并在最后列出所有增减行数小计
3. --shortstat：只显示--stat中最后的行数添加修改删除统计
4. --name-only：尽在已修改的提交信息后显示文件清单
5. --name-status：显示新增、修改和删除的文件清单
6. --abbrev-commit：仅显示SHA-1的前几个字符，而非所有的40个字符
7. --relative-date：使用较短的相对时间显示（例如："two weeks ago"）
8. --graph：显示ASCII图形表示的分支合并历史
9. --pretty＝：使用其他格式显示历史提交信息，可选项有：oneline,short,medium,full,fuller,email,raw以及format:还有相关的规则表达式
10. --date= (relative|local|default|iso|rfc|short|raw)：定制后边如果出现%ad或%cd时的日期格式
相关的过滤参数介绍如下


