# 克隆
git clone [url]
==========================
# 克隆等同的操作手段
#将一个空文件夹初始化为git文件夹
git init
# 添加远程仓库
git remote add [仓库名] [仓库的url]
# 可以查看远程仓库 （-v 远程的仓库）
git remote -v
# 拉取远程仓库相关的最新文件
git pull [前面添加的远程仓库名字] [对应的仓库的分支名]
# 查看本地相关的分支
git branch
# 查看远程仓库的分支 
git branch -r
#查看远程仓库的更多信息
git remote show [remote-name]
#远程仓库的重命名
git remote rename [old-name] [new-name]
#远程仓库的删除
git remote rm [remote-name]
# 拉取当前远程分支的数据
git fetch [remote-name]
==========================
@@基本的提交等操作
# 加入暂存区
git add [filename]
# 查看当前的git的状态
git status
# 查看git的提交的相关的日志
git log --pretty =oneline
# 删除对应的文件（这样执行直接回在暂存区添加修改）
git rm  [filename]
# 重命名对应的文件（这样执行直接回在暂存区添加修改）
git mv  [filename] [filename]
# 将提交的暂存区域的文件 还原为未暂存
git reset HEAD [filename]
#这边是将修改的文件（还没进入暂存区域的文件即无状态的时候）放弃所有的修改的（慎用）
git checkout -- [filename]
# 将对应的提交提交在本地库中 
git commit 
git commit -m "注释内容"
如果是非新加的文件（就是受到git控制的文件）这边直接加上-a 就可以直接省略 git add
git commit -a -m "comments"
可以实现这次提的注释修改为上次提交的提交的注释
git commit --amend
# 将本地提交提交到远程库中
git push -u origin master
====================================================================================
git diff 文件对比
#工作区与暂存区比较
git diff  [filename]
#工作区与HEAD ( 当前工作分支) 比较
git diff HEAD [filename]
#暂存区与HEAD比较
git diff --staged 或 --cached  [filename]
#当前分支的文件与branchName 分支的文件进行比较
git diff branchName [filename]
#与某一次提交进行比较
git diff commitId [filename]
====================================================================================
#查看历史
git log
相关的显示参数介绍如下
1. -p：按补丁显示每个更新间的差异，比下一条- -stat命令信息更全
2. --stat：显示每次更新的修改文件的统计信息，每个提交都列出了修改过的文件，以及其中添加和移除的行数，并在最后列出所有增减行数小计
3. --shortstat：只显示--stat中最后的行数添加修改删除统计
4. --name-only：尽在已修改的提交信息后显示文件清单
5. --name-status：显示新增、修改和删除的文件清单
6. --abbrev-commit：仅显示SHA-1的前几个字符，而非所有的40个字符
7. --relative-date：使用较短的相对时间显示（例如："two weeks ago"）
8. --graph：显示ASCII图形表示的分支合并历史
9. --pretty＝：使用其他格式显示历史提交信息，可选项有：oneline,short,medium,full,fuller,email,raw以及format:还有相关的规则表达式
10. --date= (relative|local|default|iso|rfc|short|raw)：定制后边如果出现%ad或%cd时的日期格式
相关的过滤参数介绍如下
1.按数量 -n 显示前n条log
2.按日期 --after="2019-1-2"显示日期之后的提交 --before=[日期] 显示该日期之前的提交 后边的日期还可以用相对时间表示，比如"1 week ago"和”yesterday"
3.按作者 --author="jay" 作者名不需要精确匹配，只需要包含就行了,而且：可以使用正则表达式,而且：这个--author不仅包含名还包含email
4.按commit描述 --grep="[匹配内容]" 而且：可以传入-i用来忽略大小写
5.按文件 -- [文件名]  另外，后边的路径还支持正则
6.按分支 git log v1 -- v1 代表v1分支下的v1文件
7.按内容 -S"<string>"、-G"<string>" 有时你想搜索和新增或删除某行代码相关的commit. 可以使用这条命令 -G 代表的是开启正则表达式的比较
8.按范围 git log <since>..<until> 这个命令可以查看某个范围的commit 命令非常有用当你使用branch做为range参数的时候. 能很方便的显示2个branch之间的不同
9.过滤掉merge commit 使用命令 --no-merges
10.按标签tag  git log v1.0 直接这样是查询标签之前的commit
11.按commit  git log commit ：查询commit之前的记录，包含commit git log commit1 commit2：查询commit1与commit2之间的记录，包括commit1和commit2
git log commit1..commit2：同上，但是不包括commit1 其中，commit可以是提交哈希值的简写模式，也可以使用HEAD代替  HEAD 表示最后一次提交
====================================================================================
#git 打标签相关的操作
#列出标签
git tag
#筛选列出标签
git tag -l 'v1.8.5
#新建标签
git tag [tagname]  用于新建一个标签，默认为HEAD，也可以指定一个commit id
#查看标签信息
git show [tagname]
#在提交版本时候可以直接指定标签
git tag -a [tagname] -m "提交的注释"
共享标签
#将本地标签推送当远程共享对应的标签
git push origin [tagname]
#一次性推送很多标签
git push origin --tags
#删除本地仓库的tag
git tag -d [tagname]
#删除远程仓库的tag
git push origin :refs/tags/[del-tagname] 通过先删除对应的本地仓库的tag 然后在使用这条命令 将对应的更新推送给远程
====================================================================================
别名定义
# 如果不想每次都输入完整的 Git 命令，可以通过 git config 文件来轻松地为每一个命令设置一个别名
#git config --global alias.unstage 'reset HEAD --'  后面可以通过 git unstage [filename] 来实现对应的将暂存变为为暂存
git config --global alias.last 'log -1 HEAD' 查看最后一次提交
====================================================================================
Git 分支操作



 
