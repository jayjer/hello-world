SQL相关知识
基础简单的连表
-- 简化联接查询
select s.id, s.name, c.id, c.name from student s, classes c where s.cid = c.id;
-- 左连接 (左为基表)
select s.id, s.name, c.id, c.name from student s left join classes c on s.cid = c.id;
-- 右连接 (右为基表)
select s.id, s.name, c.id, c.name from student s right join classes c on s.cid = c.id;
-- 内连接 (等值联合)
select s.id, s.name, c.id, c.name from student s inner join classes c on s.cid = c.id;
-- 交叉联接查询，结果是一个笛卡儿乘积
select s.id, s.name, c.id, c.name from student s ,classes c
-- 自连接
select distinct s.* from student s, student s1 where s.id <> s1.id and s.sex = s1.sex;
1#相关的积累
group by （分组相关）
having （分组后过滤数据）
各种表连接
子查询（ IN ，EXISTS ，ANY，ALL） 可参考 https://blog.csdn.net/pan_junbiao/article/details/86006839    网址
推荐使用 EXISTS > ANY > IN
行列转换 （oracle中使用pivot函数来实现）（mysql中通过groupby 子查询实现 ）可参考 https://www.cnblogs.com/SeaSky0606/p/4591135.html     网址
 2#sql 相关总结 可参考https://blog.csdn.net/wang1127248268/article/details/53406564    网址
 3# 常见的例子
（1）行列转换例子：
 SELECT
 t.c2 AS 课程
 , SUM(CASE WHEN t.c1='甲' THEN t.c3 ELSE 0 END ) AS 甲
 , SUM(CASE WHEN t.c1='乙' THEN t.c3 ELSE 0 END ) AS 乙
 , SUM(CASE WHEN t.c1='丙' THEN t.c3 ELSE 0 END ) AS 丙
 FROM (
      SELECT name as c1,'Math' as c2,MAX(Math) as c3 FROM score GROUP BY name
      UNION 
      SELECT name as c1,'English' as c2,MAX(English) as c3 FROM score GROUP BY name
      ) AS t
 GROUP BY c2;

(2) 分页查询例子
SELECT
*
FROM
table
LIMIT 1  --获取的件数
OFFSET 1 --跳过的件数

(3) 开窗函数 可参照https://www.cnblogs.com/xinaixia/p/5806217.html 网址
(排序)
基本语法 
-- 排序函数 over([分组子句] 排序子句[desc][asc])
-- 分组子句 partition by 分组列名, 分组列名
-- 排序子句 order by 列名, 列名

常见的排序函数：
ROW_NUMBER()：为每一组的行记录按顺序生成一个唯一的行号。
RANK():也为每一组的行生成一个序号，与ROW_NUMBER()不同的是如果按照ORDER BY的排序，
如果有相同的值会生成相同的序号，并且接下来的序号是不连序的。例如两个相同的行生成序号3，那么接下来会生成序号5。
DENSE_RANK(): 和RANK（）类似，不同的是如果有相同的序号，那么接下来的序号不会间断。
也就是说如果两个相同的行生成序号3，那么接下来生成的序号还是4。
NTILE (integer_expression) 按照指定的数目将数据进行分组，并为每一组生成一个序号。 
例句：
NTILE（2） over(order by  列名)是将取到的数据 分成2分 如果数据一共有3条， 这时候第一，第二条生成的序号是1 ，第三条的序号是2。

(聚合)
 基本语法 
-- 聚合函数() OVER ([分组子句]) 
-- 分组子句 partition by 分组列名, 分组列名

常见的聚合函数：
COUNT(*):获取每组的件数
SUM(列名)：获取每组数据对应的列名字段的合计值 （这边对应的字段一定是数字型相关的字段）
AVG(列名)：获取每组数据对应的列名字段的平均值 （这边对应的字段一定是数字型相关的字段）
MAX(列名)：获取每组数据对应的列名字段的最大的值
MIN(列名)：获取每组数据对应的列名字段的最小的值

@注 在这边聚合函数是和partition by连起来使用 ，其实聚合函数更加频繁的是和group by连起来使用。

(4)集合运算
-- union 并集、不重复
select id, name from student where name like 'ja%'
union 
select id, name from student where id = 4;

-- union all 并集、重复
select * from student where name like 'ja%'
union all 
select * from student;

-- 交集（相同部分）
select * from student where name like 'ja%'
intersect 
select * from student;

-- 补集（除相同部分）
select * from student where name like 'ja%'
except 
select * from student where name like 'jas%';

(5)公式表表达式
查询表的时候，有时候中间表需要重复使用，这些子查询被重复查询调用，不但效率低，而且可读性低，
不利于理解。那么公式表表达式可以解决这个问题.
with statNum(id, num) as 
(
    select cid, count(*) from student where id > 0 group by cid
)
select id, num from statNum order by id;
使用with定义暂时表（临时结果集），来让后面可以进行相关的操作。
(6)函数由于数据库不同，对应的函数也会有变化。
(7)使用 explain analyze 来进行对对应的sql 文进行相关的性能的解析。
相关的介绍的网址： https://blog.csdn.net/kmblack1/article/details/80761647 网址
(8)PostgreSQL的upsert功能(insert on conflict do)的用法
INSERT INTO table--表名 ( 字段，字段)VALUES ( 字段值，字段值 ) 
ON CONFLICT ( pr_key_cd--主键 ) DO
UPDATE 
	SET 字段 = 更新值
WHERE
更新条件
RETURNING 字段 as 别名 
--returning 用于返回 类似执行后的select
相关的网址:https://blog.csdn.net/weixin_38883338/article/details/100897511
	

