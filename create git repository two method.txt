一站式的命令 
# 克隆
git clone [url]
@注在使用 git clone 命令的时候会同时生成一个默认的指向origin/master的远程分支HEAD
可以使用 git branch -r 进行相关的查看
如果需要删除对应的这个默认生成的HEAD 分支可以使用
git remote set-head origin master 创建
git remote set-head origin -d 删除
==================================================================================
自己创建命令
1#将一个空文件夹初始化为git文件夹（此时文件夹生成 .git文件夹）
git init

2# 添加远程仓库（创建了对应的远程仓库设置信息，此时本地还没有对应的远程分支）
git remote add [remote-name] [remote-url]

3# 拉取当前远程分支的数据（会在本地创建对应的远程分支，并且获取远程分支的最新状态）
git fetch [remote-name]

4# 本地合并远程分支（将本地分支与合并的远程分支数据保持一致）
git merge [remote-name]/[branch-name]

5#生成默认的指向origin/master的远程分支HEAD
git remote set-head origin master 

@注
第3第4步骤 也可以使用 git pull [remote-name] 来替换对应的操作
==================================================================================
进行上面的操作后初始化创建库的操作就完成的
你可以进行对库的相关操作了

==================================================================================
上面是新建文件夹，来创建库
先是在已经有了个远程仓库的git repository 添加其他远程仓库的操作方法

1#添加新的需要跟踪的远程仓库
git remote add [remote-name] [remote-url]

2#本地仓库获取该远程仓库的信息(这时候本地也会建立对应的远程仓库)
git fetch [remote-name]

3#创建分支并且跟踪对应的远程分支，–track标识新创建的本地分支跟踪该远程分支
git checkout --track [remote-name]/[branch-name] -b [local-branch-name]

进行上面的操作后就可以进行对该远程仓库进行相关的文件提交操作了

@注意
当对应的git repository 存在多个远程仓库,同时远程仓库的分支名称出现重复的时候，比如
2个远程仓库都有master分支的时候，此时使用 git push [remote-name] master 进行推送的
时候会出现异常，无法提交成功。这时候需要使用  git push [remote-name] HEAD：master
进行提交。这边HEAD来确定的是当前所指分支，这样可以避免出错。
==================================================================================


